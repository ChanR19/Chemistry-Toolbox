import math

from TextBox import TextBox
from Button import Button
from Switch import Switch

from VectorDotProduct import VectorDotProduct

# switch syntax - Switch(x,y,length,width,message, text size)
# button syntax - Button(x,y,length,width, message, text size)
# text box syntax - TextBox(x,y,length,width,text size)

pHToolBoxSwitch = Switch(10,30,170,30,"pH Toolbox",20)
EquationBalanceSwitch = Switch(10,70,170,30,"Balance Equation",20)
TitrationSwitch = Switch(10,110,170,30,"Titrate",20)
CombustionAnalysisSwitch = Switch(10,150,170,60,"Combustion \nAnalysis",20)
RateGraphSwitch = Switch(10,220,170,30,"Rate Graph",20)
ResolvingVectorsSwitch = Switch(10,300,170,60,"Resolving \nVectors",20)
VectorDotProductSwitch = Switch(10,370,170,60,"Vector Dot\nProduct",20)

VDP = VectorDotProduct()

def setup(): 
    frameRate(10)
    size(1280,720)

def draw():
    background(230)
    fill(0,0,0)
    rect(0,0,200,720)
    
    pHToolBoxSwitch.update()
    EquationBalanceSwitch.update()
    TitrationSwitch.update()
    CombustionAnalysisSwitch.update()
    RateGraphSwitch.update()
    ResolvingVectorsSwitch.update()
    VectorDotProductSwitch.update()
    
    if pHToolBoxSwitch.getData() == True:
        pHToolBox()
    elif EquationBalanceSwitch.getData() == True:
        balanceEquation()
    elif TitrationSwitch.getData() == True:
        titration()
    elif CombustionAnalysisSwitch.getData() == True:
        combustionAnalysis()
    elif RateGraphSwitch.getData() == True:
        rate_graph()
    elif ResolvingVectorsSwitch.getData() == True:
        resolving_vectors()
    elif VectorDotProductSwitch.getData() == True:
        VDP.update()

PWA_molarity = TextBox(250,80,80,30,20)
PWA_button = Button(250,190,150,30,"Calculate Acid",20)
PWB_button = Button(400,190,150,30,"Calculate Base",20)
PWA_Keq = TextBox(250,150,300,30,20)
pH_answer = 0

B_acid = TextBox(250,360,80,30,20)
B_conjugate_base = TextBox(250,420,300,30,20)
B_pKa = TextBox(350,360,120,30,20)
B_button = Button(250,460,230,30,"Calculate pH of Buffer",20)
B_pH_answer = 0

def pHToolBox():
    global pH_answer,molarity_answer,B_pH_answer
    PWA_molarity.update()
    PWA_button.update()
    PWA_Keq.update()
    PWB_button.update()
    if PWA_button.getData() == True:
        pH_answer = log(1/((-1*float(PWA_Keq.getData())+sqrt(pow(float(PWA_Keq.getData()),2) + 4.0*float(PWA_molarity.getData())*float(PWA_Keq.getData()) ) )/2.0))/log(10)
    elif PWB_button.getData() == True:
        pH_answer = 14 - log(1/((-1*float(PWA_Keq.getData())+sqrt(pow(float(PWA_Keq.getData()),2) + 4.0*float(PWA_molarity.getData())*float(PWA_Keq.getData()) ) )/2.0))/log(10)
    textSize(20)
    text("Calculate pH from Weak Acid or Base Concentration",250,30)
    line(250,40,700,40)
    text("Molarity (moles per liter):",250,70)
    text("Equalibrium constant (Keq):",250,140)
    text("pH:",250,250)
    text(pH_answer,300,250)

    B_acid.update()
    B_conjugate_base.update()
    B_pKa.update()
    B_button.update()
    if B_button.getData() == True:    
        B_pH_answer = float(B_pKa.getData())+math.log10(float(B_acid.getData())/float(B_conjugate_base.getData()))
    textSize(20)
    text("Calculate pH of a Buffer",250,300)
    line(250,310,700,310)
    text("Acid:",250,340)
    text("Conjugate Base:",350,340)
    text("pKa:",250,410)
    text("pH:",250,530)
    text(B_pH_answer,300,530)
    
T_StrongAcidMolar = TextBox(250,40,200,30,20)
T_StrongAcidVolume = TextBox(250,110,200,30,20)
T_StrongBaseMolar = TextBox(250,180,200,30,20)
T_StrongBaseVolume = TextBox(250,250,200,30,20)
T_IncrementAmount = TextBox(250,320,200,30,20);
T_Button = Button(250,390,200,30,"Calculate",20)
data = [[0,0]]
def titration():
    T_StrongAcidMolar.update()
    T_StrongAcidVolume.update()
    T_StrongBaseMolar.update()
    T_StrongBaseVolume.update()
    T_IncrementAmount.update()
    T_Button.update()
    textSize(20)
    text("Acid Molarity",250,30)
    text("Acid Volume (in mL)",250,100)
    text("Base Molarity",250,170)
    text("Base Volume (in mL)",250,240)
    text("Base Increment",250,310)
    if(T_Button.getData() == True):
        global data
        data = [[0,0]]
        hydronium_moles = float(T_StrongAcidMolar.getData()) * (float(T_StrongAcidVolume.getData()) * 0.001)
        for i in range(int(T_StrongBaseVolume.getData())/int(T_IncrementAmount.getData())):
            base_volume = (i + 1) * (float(T_IncrementAmount.getData()) * 0.001)
            hydroxide_moles = float(T_StrongBaseMolar.getData())*base_volume
            total_volume = (float(T_StrongAcidVolume.getData()) * 0.001) + base_volume
            if hydronium_moles-hydroxide_moles > 0:
                pH = log(1/((hydronium_moles-hydroxide_moles)/total_volume))/log(10)
            elif hydronium_moles-hydroxide_moles < 0:
                pH = 14 - (log(1/((hydroxide_moles-hydronium_moles)/total_volume))/log(10))
            else:
                pH = 7
            data.append([round(base_volume,5),round(pH,2)])    
    for i in range(len(data)):
        point1 = [0,0]
        point2 = [0,0]
        if i > 0:
            #display data table
            textSize(20)
            text("# | Vol(L) | pH", 500,40) 
            text("---------------",500,55)
            text((str(i) + " | " + str(data[i][0]) + " | " + str(data[i][1])), 500,40 + (i * 30))
            #display graph
            text("Graph:" , 700,100)
            point2 = [data[i][0] * 5000 + 700, 500-(data[i][1]*10 + 80)]
            point1 = [data[i-1][0] * 5000 + 700, 500-(data[i-1][1]*10 + 80)]
            textSize(10)
            text(i,point1[0] - 10,point1[1] - 5) # label points
            ellipse(point1[0],point1[1], 5,5) #draw first point
            ellipse(point2[0],point2[1], 5,5) # draw second point
            line(point1[0],point1[1],point2[0],point2[1]) #connect points with a line
        
#Combustion Analysis Start
CA_H2O = TextBox(250,40,200,30,20)
CA_CO2 = TextBox(250,110,200,30,20)
#CA_MolarMass = TextBox(250,180,200,30,20)
CA_InitialMass = TextBox(250,180,200,30,20)
CA_Button = Button(250,230,250,30,"Calculate",20)
exactEmpiricalFormula = ""  
empiricalFormula = ""  
def combustionAnalysis():
    global exactEmpiricalFormula, empiricalFormula
    CA_H2O.update()
    CA_CO2.update()
    CA_Button.update()
    CA_InitialMass.update()
    textSize(20)
    text("Mass of H2O (in grams)",250,30)
    text("Mass of CO2 (in grams)",250,100)
    #text("Molar mass (not necessary)",250,170)
    text("Initial Mass (in grams)",250,170)
    if CA_Button.getData() == True:
        molesH = float(CA_H2O.getData())/18.015*2
        molesC = float(CA_CO2.getData())/44.009
        molesO = (float(CA_InitialMass.getData())-(molesH*1.008+molesC*12.011))/15.999
        leastMoles = 0
        if molesH < molesC:
            leastMoles = molesH
        else:
            leastMoles = molesC
        if molesO < leastMoles:
            leastMoles = molesO
        exactEmpiricalFormula = "C" + str(molesC/leastMoles) + "H" + str(molesH/leastMoles) + "O" + str(molesO/leastMoles)
        empiricalFormula = "C" + str(int(molesC/leastMoles)) + "H" + str(int(molesH/leastMoles)) + "O" + str(int(molesO/leastMoles))
        
        
    text("Exact Empirical Formula: "+ exactEmpiricalFormula,250,300)
    text("Empirical Formula: "+ empiricalFormula,250,330)
#Combustion Analysis End
    
#Rate Graph Start
RG_add_input_button = Button(250,30,200,30,"Add Input Boxes",20)
RG_delete_input_button = Button(450,30,200,30,"Delete Input Boxes",20)
graph_button = Button(650,30,120,30,"Graph",20)
concentration_text_boxes = [TextBox(250,110,100,30,20)]
time_text_boxes = [TextBox(450,110,100,30,20)]
molarity_to_time = []
ln_molarity_to_time = []
one_over_molarity_to_time = []
RG_text_box_y = 140
def rate_graph():
    global RG_text_box_y,molarity_to_time,concentration_text_boxes,time_text_boxes,one_over_molarity_to_time,ln_molarity_to_time
    RG_add_input_button.update()
    graph_button.update()
    RG_delete_input_button.update()
    text("Concentration",250,90)
    text("Time",450, 90)
    text("[A] to time (if this is straight, it is 0 order):" , 800,50)
    text("ln[A] to time (if this is straight, it is 1st order):" , 800,220)
    text("1/[A] to time (if this is straight, it is 2nd order):" , 800,440)
    if RG_add_input_button.getData() == True:
        concentration_text_boxes.append(TextBox(250,RG_text_box_y,100,30,20))
        time_text_boxes.append(TextBox(450,RG_text_box_y,100,30,20))
        RG_text_box_y += 30
    elif RG_delete_input_button.getData() == True:
        concentration_text_boxes.pop(len(concentration_text_boxes) - 1)
        time_text_boxes.pop(len(time_text_boxes) - 1)
        RG_text_box_y -= 30
        
    for text_box in concentration_text_boxes: #update text boxes
        text_box.update()
    for text_box in time_text_boxes:
        text_box.update()
        
    if graph_button.getData() == True:   
        molarity_to_time = []     
        ln_molarity_to_time = []
        one_over_molarity_to_time = []
        for i in range(len(concentration_text_boxes)):
            molarity_to_time.append([float(concentration_text_boxes[i].getData()),float(time_text_boxes[i].getData())])
            ln_molarity_to_time.append([log(float(concentration_text_boxes[i].getData())),float(time_text_boxes[i].getData())])
            one_over_molarity_to_time.append([1/float(concentration_text_boxes[i].getData()),float(time_text_boxes[i].getData())])
        
    for i in range(len(molarity_to_time)):
        point1 = [0,0]
        point2 = [0,0]
        if i > 0:
            #display molarity to time graph
            point2 = [800+molarity_to_time[i][1]*20, 200-(molarity_to_time[i][0])*100]
            point1 = [800+molarity_to_time[i-1][1]*20, 200-(molarity_to_time[i-1][0])*100]
            ellipse(point1[0],point1[1], 5,5) #draw first point
            ellipse(point2[0],point2[1], 5,5) # draw second point
            line(point1[0],point1[1],point2[0],point2[1]) #connect points with a line
            
            #display natural log molarity to time graph
            point2 = [800+ln_molarity_to_time[i][1]*20, 200-(ln_molarity_to_time[i][0])*100]
            point1 = [800+ln_molarity_to_time[i-1][1]*20, 200-(ln_molarity_to_time[i-1][0])*100]
            ellipse(point1[0],point1[1], 5,5) #draw first point
            ellipse(point2[0],point2[1], 5,5) # draw second point
            line(point1[0],point1[1],point2[0],point2[1]) #connect points with a line

            #display one over molarity to time graph
            point2 = [800+one_over_molarity_to_time[i][1]*20, 720-(one_over_molarity_to_time[i][0])*20]
            point1 = [800+one_over_molarity_to_time[i-1][1]*20, 720-(one_over_molarity_to_time[i-1][0])*20]
            ellipse(point1[0],point1[1], 5,5) #draw first point
            ellipse(point2[0],point2[1], 5,5) # draw second point
            line(point1[0],point1[1],point2[0],point2[1]) #connect points with a line
#Rate Graph End
    
#Equation Balancer Start        
EB_equation1 = TextBox(250,40,200,30,20)
EB_equation2 = TextBox(500,40,200,30,20)
EB_button = Button(250,80,100,30,"Balance",20)
EB_answer = "Please enter an equation"
balancedEquation = ""        
def balanceEquation():
    global balancedEquation
    EB_equation1.update()
    EB_equation2.update()
    EB_button.update()
    textSize(20)
    text("->",460,60)
    if EB_button.getData() == True:
        balancedEquation = balanceEq()
    text("Answer: " + str(balancedEquation),250,140)
import functools
import string
from fractions import Fraction
#General idea of program: convert a chemical equation into a system of equations, then use 
#linear algebra to reduce that matrix into reduced row-echelon form and find solution.


#Declare three utility mathematical functions that will be used later (in the reduction of a matrix to row-echelon form).

def gcd(a, b):
    #Return greatest common divisor using Euclid's Algorithm.
    while b:   
        a, b = b, a % b
    return a

def lcm(a, b):
    #Return least common multiple.
    return a * b // gcd(a, b)

def lcmm(args):
    #Recursively apply the lcm function to find the least common multiple of all given ints in args.
    return functools.reduce(lcm, args)


#This function takes a matrix (a list of lists) and reduces it to reduced row-echelon form, where the solution is obvious.
def gauss_jordan(matrix):
    
    #currentM will be modified, while matrix will be static for the first half of the function (for ease).
    currentM = matrix
    
    #While currentM is not empty:
    while len(currentM) != 0 and len(currentM[0]) != 0:
    
        #Look at the first column. If it's all zeros, ignore and move on. 
        #If it contains a non-zero number, shift it up to first row (or keep in first row),
        #then carry the row switch through each row with a number in it
    
        #Construct next column.
        col = []
        for row in currentM:
            col.append(row[0])
    
        firstNonZeroRow = -1
        for index, entry in enumerate(col):
            if entry.numerator != 0:
                firstNonZeroRow = index
                break
            
        if firstNonZeroRow == -1:
            #Remove column and continue.
            newM = []
            for row in currentM:
                newM.append(row[1:])
            currentM = newM
            continue
    
        else:            
            #If first nonzero row is not top, make it top. Then, reduce all remaining non-zero numbers in column.            
            #Switch locally.
            if firstNonZeroRow != 0:
                temp = currentM[0]
                currentM[0] = currentM[firstNonZeroRow]
                currentM[firstNonZeroRow] = temp
              
                
            #Reduce all rows.
            newCurrent = []
            
            #Do first row special, to avoid later looping conflicts.
            firstRow = currentM[0]
            firstNum = firstRow[0]
            temp = []
            
            #Reduce numbers.
            for entry in firstRow:
                entry /= firstNum
                temp.append(entry)
                
            #Append and end. First row done.
            newCurrent.append(temp)
        
            #Reduce all other rows based off of mathematical relation to already reduced first row. 
            #For each number in each row, if the first number (in our column of interest) is not clear, then reduction required.
            for index, row in enumerate(currentM):
                if index != 0:
                    firstNum = row[0]
                    temp = []
                    
                    #Reduce row number by number at this level.
                    for number, entry in zip(newCurrent[0], row):
                        #Apply mathematical relationship between rows of a matrix to reduce efficiently.
                        temp.append(entry + (number * (-1 * firstNum)))
                    newCurrent.append(temp)
                
            #newCurrent is now a full replacement for current. Apply our reduction operations globally and locally, and then remove col and row locally,
            #to allow for looping through a smaller matrix next time, resulting in full reduction at the end of the run.
                        
            #First, newCurrent needs to be nestled into the bottom right of matrix. That's where we have been changing entries.
            #i is row number
            for i in range(len(newCurrent)): 
                #j is entry
                for j in range(len(newCurrent[0])): 
                    #Replace wioth correct numbers.
                    matrix[len(matrix) - len(newCurrent) + i][len(matrix[0]) - len(newCurrent[0]) + j] = newCurrent[i][j]
        
        
        
            #Local switch and setup for next iteration.
            currentM = newCurrent[1:]
            temp = []
            for row in currentM:
                temp.append(row[1:])
            
            currentM = temp
        
            #Good to loop!
            continue       
        
        
    #Matrix is in row-echelon form, but not reduced!
    #So now, reduce it.
    i = 0
    while i < len(matrix):
        
        position = -1
        #If there's a leading 1 in this row, get its position.
        for index, num in enumerate(matrix[i]):
            
            if num.numerator != 0:
                position = index
                break
            
        #If position does equal -1, it's a zero row and doesn't need attention.
        if position != -1: 
            
            for index, row in enumerate(matrix):
                
                #Can't reduce a row by itself or you get an invalid 0 row.
                if  index != i: 
                    
                    #A reduction is needed if this is true:
                    if row[position] != 0:
                        
                       
                        #Create a new temporary row and populate with Fraction zeroes.
                        newRow = [Fraction(0,1)] * len(row)
                        
                        #Synchronize new row.
                        for ind, num in enumerate(matrix[index]):
                            newRow[ind] = num
                        
                        #Loop and modify each row, similar to the procedure above for achieving row-echelon form.
                        j = position                        
                        while j < len(row):
                            
                            #Reduction based on mathematical formula proven by author of code.
                            newRow[j] = row[j] - (matrix[i][j] * Fraction(row[position], matrix[i][position]))
                            
                            j += 1
                            
                        #Apply change globally.
                        matrix[index] = newRow
        
        #Loop to next row until done!
        i += 1
#Input text processing takes place here.
def Numerize(compound):
    finalResult = []
    for entry in compound:
        result = {} #dict
        currentElement = ""
        for index, char in enumerate(entry):
            if char in string.ascii_uppercase:
                if currentElement == "":
                    currentElement = char
                else:
                 
                    number = 1
                    if currentElement[-1].isdigit() and currentElement[-2].isdigit():

                        #Two-digit number!
                        numberOnes = int(currentElement[-1])
                        numberTens = int(currentElement[-2])
                        number = (numberTens * 10) + numberOnes
                        currentElement = currentElement[:len(currentElement) - 2]
                    elif currentElement[-1].isdigit():
                        #One-digit number only.
                        number = int(currentElement[-1])
                        currentElement = currentElement[:len(currentElement) - 1]
                    
                    if currentElement in result:
                        result[currentElement] += number
                    else:
                        result[currentElement] = number
                    currentElement = char
            else:
                currentElement += char 
        
        number = 1
        if currentElement[-1].isdigit() and currentElement[-2].isdigit():

            numberOnes = int(currentElement[-1])
            numberTens = int(currentElement[-2])
            number = (numberTens * 10) + numberOnes
            if currentElement[0:len(currentElement) - 2] in result:
                result[currentElement[0:len(currentElement) - 2]] += number
            else:
                result[currentElement[0:len(currentElement) - 2]] = number
        elif currentElement[-1].isdigit():
            number = int(currentElement[-1]) #TODO TWO DIGIT
            if currentElement[0:len(currentElement) - 1] in result:
                result[currentElement[0:len(currentElement) - 1]] += number
            else:
                result[currentElement[0:len(currentElement) - 1]] = number
                
        else: #just a letter here, num 1 understood
            if currentElement in result:
                result[currentElement] += number
            else:
                result[currentElement] = number
       
        finalResult.append(result)
    return finalResult

#Utility method, to generate a standard ordering of chemicals based on a given list of dictionaries (the input).
#Output: A list of strings, in a random order, that can arbitrarily be declared a standard order.

def generateList(side):
    result = []    
    #Simple loop through the input, inspection and assignment to result only.
    for dic in side:
        for key in dic:
            if key not in result:
                result.append(key)      
    
    
    return result

#Where the magic happens, and all the code is tied together.
def balanceEq():
    #GET INPUT HERE --------------------------------------------------------------------------------------------------
    partsL = EB_equation1.getData().split("+")
    partsR = EB_equation2.getData().split("+")    
    #We have compounds. Make a system of equations.    
    #Make lists of lists. Each list has [element, num] for each compound    
    elementsL = Numerize(partsL)
    elementsR = Numerize(partsR)    
    #Alright, assume Numerize worked. We have dicts for each compound in elementsL and elementsR.
    
    template = generateList(elementsL)
    
    arL = []
    arR = []
    
    for compound in elementsL:
        column = []
        for element in template:
            if element in compound:
                column.append(Fraction(compound[element],1))
            else:
                column.append(Fraction(0,1))
        arL.append(column)    
    for compound in elementsR:
        column = []
        for element in template:
            if element in compound:
                column.append(Fraction(compound[element],1))
            else:
                column.append(Fraction(0,1))
        arR.append(column)    
    #Construct transpose of true matrix.
    trueArT = arL
    for col in arR:
        newCol = []
        for num in col:
            newCol.append(num * -1)
        trueArT.append(newCol)
        
        
    #Take transpose of trueArT to get trueAr
    trueAr = []
    
    i = 0
    while i < len(trueArT[0]):
        
        newRow = []
        for row in trueArT:
            newRow.append(row[i])
            
        trueAr.append(newRow)
        
        i += 1
    #trueAr is in the right form.
    #Just reduce to reduced row-echelon form, and solving is simple!
    gauss_jordan(trueAr)
    #In reduced R-E form! Solve and output!
    lastDenoms = []
    lastFracts = []
    for row in trueAr:
        lastDenoms.append(row[-1].denominator)
        lastFracts.append(-1 * row[-1])
    
    #Find lowest scalar mult that makes lastNum contain only ints
    scalarMult = lcmm(lastDenoms)
    
    coefs = []
    for fract in lastFracts:
        if fract.numerator != 0:
            coefs.append(int(fract * scalarMult))
        
    coefs.append(scalarMult)
    
    #Output result!
    out = ""
    i = 0
    while i < len(coefs):        
        if i < len(partsL):
            if i != 0:
                out += "+"
            out += str(coefs[i])
            out += partsL[i]
        else:
            if i == len(partsL):
                out += "="
            else:
                out += "+"
            out += str(coefs[i])
            out += partsR[i - len(partsL)]                
        i += 1
    return out
#Equation Balancer End
