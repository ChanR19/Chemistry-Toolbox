from TextBox import TextBox
from Button import Button
from Switch import Switch
# switch syntax - Switch(x,y,length,width,message, text size)
# button syntax - Button(x,y,length,width, message, text size)
# text box syntax - TextBox(x,y,length,width,text size)

pHWeakAcidSwitch = Switch(10,30,170,30,"pH of Weak Acid",20)
EquationBalanceSwitch = Switch(10,70,170,30,"Balance Equation",20)
TitrationSwitch = Switch(10,110,170,30,"Titration",20)

PWA_molarity = TextBox(250,40,80,30,20)
PWA_button = Button(250,150,100,30,"Calculate",20)
PWA_answer = 0
PWA_Keq = TextBox(250,110,300,30,20)

EB_equation1 = TextBox(250,40,200,30,20)
EB_equation2 = TextBox(500,40,200,30,20)
EB_button = Button(250,80,100,30,"Balance",20)
EB_answer = "Please enter an equation"

T_StrongAcidMolar = TextBox(250,40,200,30,20)
T_StrongAcidVolume = TextBox(250,110,200,30,20)
T_StrongBaseMolar = TextBox(250,110,200,30,20)
T_StrongBaseVolume = TextBox(250,110,200,30,20)
T_IncrementAmount = TextBox(250,110,200,30,20);
T_Button = Button(250,110,200,30,"Calculate",20)

def setup(): 
    global img
    img = loadImage("default_pic.png");
    frameRate(10);
    size(1000,720);

def draw():
    background(230)
    fill(0,0,0)
    rect(0,0,200,720)
    pHWeakAcidSwitch.update()
    EquationBalanceSwitch.update()
    
    if pHWeakAcidSwitch.getData() == True:
        pHWeakSalt()
    elif EquationBalanceSwitch.getData() == True:
        balanceEquation()
    elif TitrationSwitch.getData() == True:
        titration()
    else:
        default()

def default():
    image(img, 300, 0);

def pHWeakSalt():
    global PWA_answer
    PWA_molarity.update()
    PWA_button.update()
    PWA_Keq.update()
    if PWA_button.getData() == True:
        PWA_answer = log(1/((-1*float(PWA_Keq.getData())+sqrt(pow(float(PWA_Keq.getData()),2) + 4.0*float(PWA_molarity.getData())*float(PWA_Keq.getData()) ) )/2.0))/log(10)
    textSize(20)
    text("Molarity:",250,30)
    text("Equalibrium constant (Keq):",250,100)
    text("Answer:",250,210)
    text(PWA_answer,330,210)

def balanceEquation():
    EB_equation1.update()
    EB_equation2.update()
    EB_button.update()
    textSize(20)
    text("->",460,60)
    text("Answer: ",250,140)
    text(EB_answer,330,140)
    
 def titration():
    
    from TextBox import TextBox
from Button import Button
from Switch import Switch
# switch syntax - Switch(x,y,length,width,message, text size)
# button syntax - Button(x,y,length,width, message, text size)
# text box syntax - TextBox(x,y,length,width,text size)

pHWeakAcidSwitch = Switch(10,30,170,30,"pH Toolbox",20)
EquationBalanceSwitch = Switch(10,70,170,30,"Balance Equation",20)
TitrationSwitch = Switch(10,110,170,30,"Titrate",20)

PWA_molarity = TextBox(250,40,80,30,20)
PWA_button = Button(250,150,100,30,"Calculate",20)
PWA_answer = 0
PWA_Keq = TextBox(250,110,300,30,20)

EB_equation1 = TextBox(250,40,200,30,20)
EB_equation2 = TextBox(500,40,200,30,20)
EB_button = Button(250,80,100,30,"Balance",20)
EB_answer = "Please enter an equation"

T_StrongAcidMolar = TextBox(250,40,200,30,20)
T_StrongAcidVolume = TextBox(250,110,200,30,20)
T_StrongBaseMolar = TextBox(250,180,200,30,20)
T_StrongBaseVolume = TextBox(250,250,200,30,20)
T_IncrementAmount = TextBox(250,320,200,30,20);
T_Button = Button(250,390,200,30,"Calculate",20)

def setup(): 
    global img,img2
    img = loadImage("default_pic.png");
    img2 = loadImage("av.png");
    frameRate(10);
    size(1280,720);

def draw():
    background(230)
    fill(0,0,0)
    rect(0,0,200,720)
    
    pHWeakAcidSwitch.update()
    EquationBalanceSwitch.update()
    TitrationSwitch.update()
    av()
    
    if pHWeakAcidSwitch.getData() == True:
        pHWeakSalt()
    elif EquationBalanceSwitch.getData() == True:
        balanceEquation()
    elif TitrationSwitch.getData() == True:
        titration()
    else:
        default()

def default():
    image(img, 300, 0);

def pHWeakSalt():
    global PWA_answer
    PWA_molarity.update()
    PWA_button.update()
    PWA_Keq.update()
    if PWA_button.getData() == True:
        PWA_answer = log(1/((-1*float(PWA_Keq.getData())+sqrt(pow(float(PWA_Keq.getData()),2) + 4.0*float(PWA_molarity.getData())*float(PWA_Keq.getData()) ) )/2.0))/log(10)
    textSize(20)
    text("Molarity:",250,30)
    text("Equalibrium constant (Keq):",250,100)
    text("Answer:",250,210)
    text(PWA_answer,330,210)

def balanceEquation():
    EB_equation1.update()
    EB_equation2.update()
    EB_button.update()
    textSize(20)
    text("->",460,60)
    text("Answer: ",250,140)
    text(EB_answer,330,140)
    
data = [[0,0]]
def titration():
    T_StrongAcidMolar.update()
    T_StrongAcidVolume.update()
    T_StrongBaseMolar.update()
    T_StrongBaseVolume.update()
    T_IncrementAmount.update()
    T_Button.update()
    textSize(20)
    text("Acid Molarity",250,30)
    text("Acid Volume (in mL)",250,100)
    text("Base Molarity",250,170)
    text("Base Volume (in mL)",250,240)
    text("Base Increment",250,310)
    if(T_Button.getData() == True):
        global data
        data = [[0,0]]
        hydronium_moles = float(T_StrongAcidMolar.getData()) * (float(T_StrongAcidVolume.getData()) * 0.001)
        for i in range(int(T_StrongBaseVolume.getData())/int(T_IncrementAmount.getData())):
            base_volume = (i + 1) * (float(T_IncrementAmount.getData()) * 0.001)
            hydroxide_moles = float(T_StrongBaseMolar.getData())*base_volume
            total_volume = (float(T_StrongAcidVolume.getData()) * 0.001) + base_volume
            if hydronium_moles-hydroxide_moles > 0:
                pH = log(1/((hydronium_moles-hydroxide_moles)/total_volume))/log(10)
            elif hydronium_moles-hydroxide_moles < 0:
                pH = 14 - (log(1/((hydroxide_moles-hydronium_moles)/total_volume))/log(10))
            else:
                pH = 7
            data.append([round(base_volume,5),round(pH,2)])    
    for i in range(len(data)):
        point1 = [0,0]
        point2 = [0,0]
        if i > 0:
            text("Volume(L) | pH", 500,40)
            text(str(data[i]), 500,40 + (i * 30))
            point2 = [data[i][0] * 5000 + 700, 500-(data[i][1]*10 + 80)]
            point1 = [data[i-1][0] * 5000 + 700, 500-(data[i-1][1]*10 + 80)]
            ellipse(point1[0],point1[1], 5,5)
            ellipse(point1[0],point1[1], 5,5)
            line(point1[0],point1[1],point2[0],point2[1])
timer = 0 
stuff = ""       
def av():
    global timer, stuff
    println(stuff)
    timer += 1
    if keyPressed:
        stuff += str(key)
        if(key == BACKSPACE):
            stuff = ""
    if timer >= 500:
        stuff = ""
        timer = 0
    if stuff == "6021023":
        image(img2, 300, 0)
    textSize(5)
    text(stuff,1000,700)
    
